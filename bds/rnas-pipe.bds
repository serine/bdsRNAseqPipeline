#! /usr/bin/env bds
#----------------------------------------------------------------------------------------------------
#
#  Map Reads to the reference genome
#                                                                                
#----------------------------------------------------------------------------------------------------

#------------------------------
#  Serine #MonashFlavour
#------------------------------
#
#----------------------------------------------------------------------------------------------------
#
#  About STARmergeNalign.bds
#
#   -  run -h, -help, --help to get more help of the command line arguments
#   -  takes a whole directory that contatins fastq files and maps to the reference genome
#   -  identifies samples that span different lanes and merges then together during STAR run,
#      outputting sigle bam file per sample.
#   -  auto matches paired end
#   -  creates strandedNo and strandedReverse directories under the current directory and 
#      performce read count using htseq-count outputting results in corresponding directories.

#----------------------------------------------------------------------------------------------------
#
#  Usage:
#
#  1. STAR outputs all file into the current directory i.e the directory STAR was executed from.
#  2. The best practise is to make new directory for your STARmergeNaling.bds run and execute
#     STARmergeNalign.bds script within that directory.
#  
#----------------------------------------------------------------------------------------------------
#  Input Parametrs
#----------------------------------------------------------------------------------------------------

string check4input 
string star           help select if you would like to run star. Options: yes or no
string fastqDir       help path to the directory with fastq file       
string genomeIndex    help path to the directory with genome index for the coresponding species
string count          help Select if you would like to count reads. Options: yes or no
string gtfFile        help path to the directory with gtf file
string prePro         help Select if you would like to preprocess your bam files for RNA-SeQC run Options: yes or no
string fastaRef       help path to the reference fasta file, required when doing preprocessing for RNA-SeQC run
string rnaseQC        help Select if would like to run RNA-SeQC tool

#----------------------------------------------------------------------------------------------------
#
# Main
#
#----------------------------------------------------------------------------------------------------

#------------------------------
# Sanity check
#------------------------------

#----------------------------------------------------------------------------------------------------

if( !star.isEmpty() ) {

    check4input = "populated"   
    if( ( star != "yes" ) && ( star != "no" ) ) error "Usage: -star yes or no"
    if( fastqDir.isEmpty() )  error "Usage: -fastqDir /path/to/fastq_reads/"
    if( genomeIndex.isEmpty() )  error "Usage: -genomeIndex /path/to/genome_index/"
}

#----------------------------------------------------------------------------------------------------

if( !count.isEmpty() ) {

    check4input = "populated"   
    if( ( count != "yes" ) && ( count != "no" ) ) error "Usage: -count yes or no"
    if( gtfFile.isEmpty() )  error "Usage: -gtfFile /path/to/gtf_file/"
}

#----------------------------------------------------------------------------------------------------

if( !prePro.isEmpty() ) {

    check4input = "populated"   
    if( ( prePro != "yes" ) && ( prePro != "no" ) ) error "Usage: -prePro yes or no"
    if( fastaRef.isEmpty() ) error "Usage: -fastaRef /path/to/reference_fasta_file"
}

#----------------------------------------------------------------------------------------------------

if( !rnaseQC.isEmpty() ) {
    if( ( rnaseQC != "yes" ) && ( rnaseQC != "no" ) ) error "Usage: -rnaSeQC yes or no"
}

if( check4input.isEmpty() ) sys ~/scripts/bds/STARalign.bds --help

#----------------------------------------------------------------------------------------------------

#------------------------------
# Map reads
#------------------------------

string[] uniqueNamesList # a list with files names, that is sorted uniquely
string checkNameRoot

#------------------------------
# Get list of unique names
#------------------------------

for (string fq : fastqDir.dir() ) {
     # make sure we have fastq files only
     if ( fq.endsWith(".fastq.gz") ) {

         # get the root of the file name with regex

         string[] tempRoot = fq.split("_L[0-9]{3}_R[0-9].fastq.gz$")
         string rootName = tempRoot[0]

     if ( rootName != checkNameRoot ) {

             # append to the list if it isn't in the list already
             uniqueNamesList.add(rootName)
             checkNameRoot = rootName

         }

         else {
             
             # if in the list than just skip
             checkNameRoot = rootName 

         }
     }
}

#------------------------------
# Execution of STAR
#------------------------------

#------------------------------
# Sanity check if pwd hasn't
# got any bam files in it
#------------------------------

if ( star == "yes" ) {

    string[] listR1
    string[] listR2
    string[] laneList
    
    for (string uniqueName : uniqueNamesList ) {
    
        for (string fqread : fastqDir.dirPath() ) {
        
            if (fqread.endsWith("fastq.gz") ) {
            
                string getFileIndex = fqread.lastIndexOf(uniqueName) 
                
                if ( getFileIndex != -1 ) {
        
                    string getR1Index = fqread.lastIndexOf("R1") 
    
                    if ( getR1Index != -1 ) {
                    
                        #print("$fqread\n")
                        string[] laneN1 = fqread.split(uniqueName+"_")
                        string laneN2 = laneN1.pop()
                        string[] laneN3 = laneN2.split("_R1")
                        string laneN4 = laneN3[0]
    
                        listR1.add(fqread)
                        laneList.add(laneN4)
        
                    }
    
                    else {
    
                        listR2.add(fqread)
                    }
                }
            }
        }
        string read1 = listR1.join(",")
        string read2 = listR2.join(",")
        string laneNumber = laneList.join(",")
        string preFix = uniqueName+"_"
    
        task STAR --runThreadN 26 \
                   --genomeDir $genomeIndex \
                   --outSAMtype BAM Unsorted \
                   --outSAMattrRGline ID:$laneNumber CN:AGRF DS:RNA-seq PL:ILLUMINA PM:MiSeq SM:$uniqueName \
                   --outSAMunmapped Within \
                   --readFilesCommand zcat \
                   --readFilesIn $read1 $read2 \
                   --outFileNamePrefix $preFix
        
        listR1 = []
        listR2 = []
        laneList = []
       
        wait
    }
}

# gets the current directory to with bam files
string workingDir = "$PWD"

#------------------------------
# piacrd secssion
# bam file preprocessing 
# for RNA-SeQC run
#------------------------------

if ( prePro == "yes" ) {

    string preqcBamFiles = "preqcBamFiles"

    if ( !preqcBamFiles.exists() ) {
        preqcBamFiles.mkdir()
    }

    # loop over the directory and submit all bam files for sorting

    for (string bamFile : workingDir.dirPath() ) {
    
        if( bamFile.endsWith(".bam") ) {
    
            string[] temp = bamFile.split("/")
            string name = temp.pop()
            string[] temp2 = name.split('_Aligned')
            string rootName = temp2[0]
            string sortedName = preqcBamFiles+"/"+rootName+"_sorted.bam"

            task picard SortSam TMP_DIR=tmp/ \
                                INPUT=$bamFile \
                                OUTPUT=$sortedName \
                                SORT_ORDER=coordinate
        }
    }
    
    wait

    string preqcDir = "$PWD"+"/"+preqcBamFiles

    # waint until all bam files in the directory were sorted
    # then reorder all sorted bam files

    for (string bamFile : preqcDir.dirPath() ) {

        if( bamFile.endsWith("sorted.bam") ) {

            string[] temp = bamFile.split("/")
            string name = temp.pop()
            string[] temp2 = name.split('_sorted')
            string rootName = temp2[0]
            string sortedName = preqcBamFiles+"/"+rootName+"_sorted_reordered.bam"

            task picard ReorderSam TMP_DIR=tmp/ \
                                   INPUT=$bamFile \
                                   OUTPUT=$sortedName \
                                   REFERENCE=$fastaRef

        }
    }

    wait 

    # wait until all bam fiels in the direcotory were reordered
    # then mark duplicates

    for (string bamFile : preqcDir.dirPath() ) {
    
        if( bamFile.endsWith("reordered.bam") ) {
    
            string[] temp = bamFile.split("/")
            string name = temp.pop()
            string[] temp2 = name.split('_sorted')
            string rootName = temp2[0]
            string sortedName = preqcBamFiles+"/"+rootName+"_sorted_reordered_marked_dups.bam"
            string metricsName = preqcBamFiles+"/"+rootName+"_sorted_reordered_marked_dups.metrics"

            task picard MarkDuplicates TMP_DIR=tmp/ \
                                       CREATE_INDEX=true \
                                       INPUT=$bamFile \
                                       OUTPUT=$sortedName \
                                       METRICS_FILE=$metricsName

        }
    }

    wait
}

#------------------------------
# Beta RNA-SeQC
#------------------------------

if ( rnaseQC == "yes" ) {

    #sys module load RNA-SeQC

    #string rnaseqcDir = "rnaseqcDir"

    #if ( !rnaseqcDir.exists() ) {
    #   rnaseqcDir.mkdir()
    #}
    ##outputDir = rna-seqcDir+"/"+

    #for ( string markedBam : preqcDir.dirPath() ) {
    #   print("$markedBam\n")
    ##  task rna-seqc -s 
    #}

    print("Hi\n")

}

#------------------------------
# htseq-count 
#------------------------------

if ( count == "yes" ) {
    
    string strandedReverse = "strandedReverse"
    string strandedNo = "strandedNo"

    if( (!strandedReverse.exists()) && (!strandedNo.exists()) ) {
        strandedReverse.mkdir()
        strandedNo.mkdir()
    }
    
    for (string bamFile : workingDir.dirPath() ) {
    
        if( bamFile.endsWith(".bam") ) {
    
            string[] temp = bamFile.split("/")
            string name = temp.pop()
            string[] temp2 = name.split('_Aligned')
            string rootName = temp2[0]
    
            string runOne = strandedReverse+"/"+rootName+".txt" 
            string runTwo = strandedNo+"/"+rootName+".txt" 

            task htseq-count -q -s reverse -f bam $bamFile $gtfFile > $runOne
            task htseq-count -q -s no -f bam $bamFile $gtfFile > $runTwo

        }
    }
}

#------------------------------
# End
#------------------------------
