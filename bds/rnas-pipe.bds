#! /usr/bin/env bds

#----------------------------------------------------------------------------------------------------
#
#  Map Reads to the reference genome
#                                                                                
#----------------------------------------------------------------------------------------------------

#------------------------------
#  Serine #MonashFlavour
#------------------------------
#
#----------------------------------------------------------------------------------------------------
#
#  About STARmergeNalign.bds
#
#   -  run -h, -help, --help to get more help of the command line arguments
#   -  takes a whole directory that contatins fastq files and maps to the reference genome
#   -  identifies samples that span different lanes and merges then together during STAR run,
#      outputting sigle bam file per sample.
#   -  auto matches paired end
#   -  creates strandedNo and strandedReverse directories under the current directory and 
#      performce read count using htseq-count outputting results in corresponding directories.

#----------------------------------------------------------------------------------------------------
#
#  Usage:
#
#  1. STAR outputs all file into the current directory i.e the directory STAR was executed from.
#  2. The best practise is to make new directory for your STARmergeNaling.bds run and execute
#     STARmergeNalign.bds script within that directory.
#  
#----------------------------------------------------------------------------------------------------
#  Input Parametrs
#----------------------------------------------------------------------------------------------------
#sys sleep 40
string check4input 
bool star           help select if you would like to run star. Options: yes or no
string fqDir       help path to the directory with fastq file       
string genomeIndex    help path to the directory with genome index for the coresponding species
string count          help Select if you would like to count reads. Options: yes or no
string gtfFile        help path to the directory with gtf file
string prePro         help Select if you would like to preprocess your bam files for RNA-SeQC run Options: yes or no
string fastaRef       help path to the reference fasta file, required when doing preprocessing for RNA-SeQC run
string fastqc         help select if you would like to run fastQC report on the files
string clip           help select if you would like to trim your fastq files before processing further
string bwa            help select if you would like to use bwa aligner
string fqRegex
string extn
#int threads              help specify number of threads to use per signle STAR run. If you are running several alignments in parallel be wise not to over subscribe the threads

#----------------------------------------
# Temp section
#----------------------------------------

#string regexOne = "_L[0-9]{3}_R[0-9]_[0-9]{3}.fastq.gz$"
#string regexTwo = "_L[0-9]{3}_R[0-9].fastq.gz$"
#if(fqRegex.isEmpty()) fqRegex = "_L[0-9]{3}_R[0-9]_[0-9]{3}.fastq.gz$"
#if(fqRegex.isEmpty()) fqRegex = "_L[0-9]{3}_R[0-9].fastq.gz$"
if(fqRegex.isEmpty()) fqRegex = "_R[0-9]_[0-9]{3}.fastq.gz$"
if(extn.isEmpty()) extn = "*fastq.gz"
#----------------------------------------------------------------------------------------------------
#
# Main
#
#----------------------------------------------------------------------------------------------------

#------------------------------
# Make directories as required
#------------------------------

#----------------------------------------------------------------------------------------------------
string bamFiles = "bamFiles"
string preqcBamFiles = "preqcBamFiles"
#string strandedReverse = "strandedReverse"
#string strandedNo = "strandedNo"
string featureNo = "featureNo"
string featureReverse = "featureReverse"
string fastqcReport = "fastqcReport"
string clippedFastq = "clippedFastq"

if(!bamFiles.exists() && !star) bamFiles.mkdir()
#if((!bamFiles.exists() && !star) || (!bwa.isEmpty())) bamFiles.mkdir()
if((!preqcBamFiles.exists()) && (!prePro.isEmpty())) preqcBamFiles.mkdir()
if((!clippedFastq.exists()) && (!clip.isEmpty())) clippedFastq.mkdir()
#if( (!strandedReverse.exists()) && (!strandedNo.exists())  && (!count.isEmpty()) ) {
#    strandedReverse.mkdir()
#    strandedNo.mkdir()
#}
if( (!featureNo.exists()) && (!count.isEmpty()) ) featureNo.mkdir()
if( (!featureReverse.exists()) && (!count.isEmpty()) ) featureReverse.mkdir()
if( (!fastqcReport.exists()) && (!fastqc.isEmpty()) ) fastqcReport.mkdir()
#----------------------------------------------------------------------------------------------------

#------------------------------
# Sanity check
#------------------------------

#----------------------------------------------------------------------------------------------------
#if( !fastqc.isEmpty() ) {
#    check4input = "populated"   
#    if( ( fastqc != "yes" ) && ( fastqc != "no" ) ) error "Usage: -fastqc yes or no"
#    if(fqDir.isEmpty())  error "Usage: -fqDir /path/to/fastq_reads/"
#}
##----------------------------------------------------------------------------------------------------
#if( !clip.isEmpty() ) {
#    check4input = "populated"   
#    if( ( clip != "yes" ) && ( clip != "no" ) ) error "Usage: -clip yes or no"
#    if( fqDir.isEmpty() )  error "Usage: -fqDir /path/to/fastq_reads/"
#}
##----------------------------------------------------------------------------------------------------
#if( !bwa.isEmpty() ) {
#    check4input = "populated"   
#    if( ( bwa != "yes" ) && ( bwa != "no" ) ) error "Usage: -bwa yes or no"
#    if( fqDir.isEmpty() ) error "Usage: -fqDir /path/to/fastq_reads/"
#    if( genomeIndex.isEmpty() )  error "Usage: -genomeIndex /path/to/genome_index/"
#}
##----------------------------------------------------------------------------------------------------
#if(!star.isEmpty()) {
#    check4input = "populated"   
#    if( ( star != "yes" ) && ( star != "no" ) ) error "Usage: -star yes or no"
#    if( fqDir.isEmpty() )  error "Usage: -fqDir /path/to/fastq_reads/"
#    if( genomeIndex.isEmpty() )  error "Usage: -genomeIndex /path/to/genome_index/"
#}
##----------------------------------------------------------------------------------------------------
#if( !count.isEmpty() ) {
#    check4input = "populated"   
#    if( ( count != "yes" ) && ( count != "no" ) ) error "Usage: -count yes or no"
#    if( gtfFile.isEmpty() )  error "Usage: -gtfFile /path/to/gtf_file/"
#}
##----------------------------------------------------------------------------------------------------
#if( !prePro.isEmpty() ) {
#    check4input = "populated"   
#    if( ( prePro != "yes" ) && ( prePro != "no" ) ) error "Usage: -prePro yes or no"
#    if( fastaRef.isEmpty() ) error "Usage: -fastaRef /path/to/reference_fasta_file"
#}
#
#if( check4input.isEmpty() ) sys ~/scripts/bds/rnas-pipe.bds --help
##----------------------------------------------------------------------------------------------------

#------------------------------
# fastQC report
#------------------------------
if (fastqc == "yes" ) {

    sys module load fastqc
    string fastqcFiles = ''

    for ( string fq : fqDir.dir("*fastq.gz") ) {
        fastqcFiles += " "+fq 
    }

    task fastqc -o $fastqcReport -f fastq $fastqcFiles
}

#------------------------------
# Nesoni clip
#------------------------------
#if (clip == "yes") {
#    string{} fqFiles = fqGet(fqDir, fqRegex, extn)
#    for(string fq : fqFiles.keys()) {
#        string mapValue = fqFiles{fq}
#        string[] reads = mapValue.split(",")
#        string readOne = reads[1]
#        string readOnePair = readOne.swapExt("_R1_002.fastq.gz", "_R2_002.fastq.gz")
#        string readTwo = reads[2]
#        string readTwoPair = readTwo.swapExt("_R1_001.fastq.gz", "_R2_001.fastq.gz")
#        
#        string pairOne = readOne+' '+readOnePair 
#        string pairTwo = readTwo+' '+readTwoPair 
#
#        string preFix = clippedFastq+"/"+fq
#        string outPut = preFix+"_single.fq.gz"
#        string logFile = preFix+"_log.txt"
#
#        task ([outPut, logFile] <- [readOne, readTwo]) {
#            sys nesoni clip: --quality 28 \
#                             --out-separate yes \
#                             $preFix \
#                       pairs: $pairOne pairs: $pairTwo
#        }
#    }
#}

#------------------------------
# BWA alignment
#------------------------------
if (bwa == "yes") {

    if( (!fqDir.isEmpty()) && (clip == "yes") ) fqDir = clippedFastq

    for(string fq : fqDir.dir("*R1.fq.gz")) {
        string fqName = fq.baseName()
        string bamFile = bamFiles+"/"+fqName.swapExt("fq.gz", "bam")
        string bamSortedPrefix = bamFile.swapExt(".bam", "_sorted")
        string bamSortedFile = bamSortedPrefix.swapExt("_sorted", "_sorted.bam")
        string bamIndexFile = bamSortedPrefix.swapExt("_sorted", "_sorted.bam.bai")
        string pair = fq.swapExt("_R1.fq.gz", "_R2.fq.gz")
        #print("$fqName $bamFile $bamSortedFile \n")
    
        #task ([bamSortedFile, bamIndexFile] <- fq) {
        #    sys bwa aln -t 4 $genomeIndex $fq > $samIndexFile
        #    sys bwa samse $genomeIndex $samIndexFile $fq | \
        #        samtools view -S -b - > $bamFile
        #    sys samtools sort -@ 4 $bamFile $bamSortedPrefix
        #    sys samtools index $bamSortedFile
        #} 
        
        task ([bamSortedFile, bamIndexFile] <- fq) {
            sys bwa mem -t 5 $genomeIndex $fq $pair | \
                samtools view -S -b - > $bamFile
            sys samtools sort -@ 4 $bamFile $bamSortedPrefix
            sys samtools index $bamSortedFile
        }
    }
}

#------------------------------
# STAR alignment 
#------------------------------

#--------------
# Notes
#--------------
# - set the default file extension, most common e.g default: fastq.gz. Then user can change through optional
#   flag if they want
# - set the default regex for unique name identification and give user and option to specify different file
#   extension
# - remember to add .dirPath()
if(star) {
    string{} uniqueNamesMap = getUniqueNames(fqDir)
    #loop over each key in the map
    for(string fqread : uniqueNamesMap.keys()) {
        # get value for each key and break values into list
        string mapValue = uniqueNamesMap{fqread} 
        string[] getList = mapValue.split(",")
        string reads = getSTARreads(getList)
        string bamFile = mapSTAR(genomeIndex, reads, fqread) 
    }
}

#----------------------------------------------------------------------
# piacrd secssion for bam file preprocessing for RNA-SeQC report
#----------------------------------------------------------------------

if(prePro == "yes") {
   # loop over bamFiles directory.
   # only interested in bam files
    for ( string bamFile : bamFiles.dir("*bam") ) {
        # put newly generated *sorted.bam files into preqcBamFiles directory
        string sortedName = preqcBamFiles+"/"+bamFile.baseName().swapExt("Aligned.out.bam", "sorted.bam")

        task ( sortedName <- bamFile ) {
            sys picard SortSam TMP_DIR=tmp/ \
                              VALIDATION_STRINGENCY=LENIENT \
                              INPUT=$bamFile \
                              OUTPUT=$sortedName \
                              SORT_ORDER=coordinate
        }
        # put newly generated reordered.bam files into the same directory i.e preqcBamFiles
        string reorderedName = sortedName.swapExt(".bam", "_reordered.bam")
    
        task ( reorderedName <- sortedName ) {
           sys picard ReorderSam TMP_DIR=tmp/ \
                                 VALIDATION_STRINGENCY=LENIENT \
                                 INPUT=$sortedName \
                                 OUTPUT=$reorderedName \
                                 REFERENCE=$fastaRef
        }
    
        string mdupsName = reorderedName.swapExt(".bam", "_marked_dups.bam")
        string metricsName = reorderedName.swapExt(".bam", "_marked_dups.metrics")

        task ( mdupsName <- reorderedName ) {
           sys picard MarkDuplicates TMP_DIR=tmp/ \
                                     VALIDATION_STRINGENCY=LENIENT \
                                     CREATE_INDEX=true \
                                     INPUT=$reorderedName \
                                     OUTPUT=$mdupsName \
                                     METRICS_FILE=$metricsName
        }
    }
}

#------------------------------
# htseq-count 
#------------------------------

#if ( count == "yes" ) {
#        
#    for (string bamFile : bamFiles.dir("*bam") ) {
#    
#        string reverseStranded = strandedReverse+"/"+bamFile.baseName().swapExt("_Aligned.out.bam", ".txt")
#         
#        task ( reverseStranded <- bamFile ) {
#            sys htseq-count --quiet \
#                            --stranded=reverse \
#                            --format=bam \
#                            $bamFile $gtfFile > $reverseStranded
#        }
#
#        string noStranded = strandedNo+"/"+bamFile.baseName().swapExt("_Aligned.out.bam", ".txt")
#
#        task ( noStranded <- bamFile ) {
#            sys htseq-count --quiet \
#                            --stranded=no \
#                            --format=bam \
#                            $bamFile $gtfFile > $noStranded
#        }
#    }
#}

#------------------------------
# featureCount
#------------------------------

if ( count == "yes" ) {
    for (string bamFile : bamFiles.dir("*bam") ) {
        string reverseFeature = featureReverse+"/"+bamFile.baseName().swapExt("_Aligned.out.bam", ".txt")
        task (reverseFeature <- bamFile) {
            sys featureCounts -a $gtfFile \
                              -o $reverseFeature \
                              $bamFile \
                              -s 2
        }
    
        string noFeature = featureNo+"/"+bamFile.baseName().swapExt("_Aligned.out.bam", ".txt")
        task (noFeature <- bamFile) {
            sys featureCounts -a $gtfFile \
                              -o $noFeature \
                              $bamFile \
                              -s 0
        }
    }
}
#------------------------------
# End
#------------------------------

#------------------------------
# Functions
#------------------------------
string{} getUniqueNames(string fqDir) {
    # Map with unique root key
    string{} uniqueNamesMap 
    for(string fq : fqDir.dir(extn)) {
        # make sure we have fastq files only
        string getR1Index = fq.lastIndexOf("R1") 
        if(getR1Index != -1) {
            # get the root of the file name with regex
            string[] getFile = fq.split(fqRegex)
            string rootName = getFile[0]
            # append to the list if it isn't in the list already
            if(!uniqueNamesMap.hasKey(rootName)) uniqueNamesMap{rootName}=""
            uniqueNamesMap{rootName}+=fq+","
        }
    }
    return uniqueNamesMap
}

string getSTARreads(string[] readsList) {

    string[] listR1, listR2, laneList
    string read1, read2, lanes, preFix

    int getListSize = readsList.size()-1
    for(int i : range(0,getListSize)) {
        # get fastq reads and get it pair 
        string singleRead = readsList[i]
        string[] getLastBit = singleRead.split("R1")
        string lastBit = getLastBit.pop()
        string rOne = "R1"+lastBit
        string rTwo = "R2"+lastBit
        string pairedEnd = singleRead.swapExt(rOne, rTwo)
        bool checkPair = pairedEnd.isFile()
        # exctract lanes information from the file name
        #string[] tmpLane = singleRead.split("_")
        #string tmpLane2 = tmpLane.pop()
        #string getLane = tmpLane.pop()
        if(checkPair){
            listR1.add(singleRead)
            listR2.add(pairedEnd)
            #laneList.add(getLane)
            # concatenate for STAR usage 
            read1 = listR1.join(",")
            read2 = listR2.join(",")
            #lanes = laneList.join(",")
            return "$read1 $read2"
        }
        else{
            listR1.add(singleRead)
            read1 = listR1.join(",")
            return read1
        }
    }
}

string mapSTAR(string genomeIndex, string reads, string rootName) {
   
    string preFix = bamFiles+"/"+rootName.baseName()+"_"
    string bamOut = preFix+"Aligned.out.bam"
    task(bamOut <- reads) {
        sys STAR --runThreadN 28 \
                  --genomeDir $genomeIndex \
                  --outSAMtype BAM Unsorted \
                  --outSAMunmapped Within \
                  --readFilesCommand zcat \
                  --readFilesIn $reads \
                  --outFileNamePrefix $preFix
    }
    wait
    # you can remove wait statement and reduce number of threads
    # however this will run all your fastq files in parallel
    # doing this I find a bit impractical on our server because of
    # limited RAM - only 128 Gb
    return bamOut
}
#----------------------------------------------------------------------------------------------------
