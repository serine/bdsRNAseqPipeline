#! /usr/bin/env bds
#----------------------------------------------------------------------------------------------------
#
#  Map Reads to the reference genome
#                                                                                
#----------------------------------------------------------------------------------------------------

#------------------------------
#  Serine #MonashFlavour
#------------------------------
#
#----------------------------------------------------------------------------------------------------
#
#  About STARmergeNalign.bds
#
#   -  run -h, -help, --help to get more help of the command line arguments
#   -  takes a whole directory that contatins fastq files and maps to the reference genome
#   -  identifies samples that span different lanes and merges then together during STAR run,
#      outputting sigle bam file per sample.
#   -  auto matches paired end
#   -  creates strandedNo and strandedReverse directories under the current directory and 
#      performce read count using htseq-count outputting results in corresponding directories.

#----------------------------------------------------------------------------------------------------
#
#  Usage:
#
#  1. STAR outputs all file into the current directory i.e the directory STAR was executed from.
#  2. The best practise is to make new directory for your STARmergeNaling.bds run and execute
#     STARmergeNalign.bds script within that directory.
#  
#----------------------------------------------------------------------------------------------------
#  Input Parametrs
#----------------------------------------------------------------------------------------------------
#sys sleep 40

string check4input 
string star           help select if you would like to run star. Options: yes or no
string fastqDir       help path to the directory with fastq file       
string genomeIndex    help path to the directory with genome index for the coresponding species
string count          help Select if you would like to count reads. Options: yes or no
string gtfFile        help path to the directory with gtf file
string prePro         help Select if you would like to preprocess your bam files for RNA-SeQC run Options: yes or no
string fastaRef       help path to the reference fasta file, required when doing preprocessing for RNA-SeQC run
#int threads              help specify number of threads to use per signle STAR run. If you are running several alignments in parallel be wise not to over subscribe the threads

#----------------------------------------------------------------------------------------------------
#
# Main
#
#----------------------------------------------------------------------------------------------------

#------------------------------
# Sanity check
#------------------------------

#----------------------------------------------------------------------------------------------------
if( !star.isEmpty() ) {

    check4input = "populated"   
    if( ( star != "yes" ) && ( star != "no" ) ) error "Usage: -star yes or no"
    if( fastqDir.isEmpty() )  error "Usage: -fastqDir /path/to/fastq_reads/"
    if( genomeIndex.isEmpty() )  error "Usage: -genomeIndex /path/to/genome_index/"
}
#----------------------------------------------------------------------------------------------------
if( !count.isEmpty() ) {

    check4input = "populated"   
    if( ( count != "yes" ) && ( count != "no" ) ) error "Usage: -count yes or no"
    if( gtfFile.isEmpty() )  error "Usage: -gtfFile /path/to/gtf_file/"
}
#----------------------------------------------------------------------------------------------------
if( !prePro.isEmpty() ) {

    check4input = "populated"   
    if( ( prePro != "yes" ) && ( prePro != "no" ) ) error "Usage: -prePro yes or no"
    if( fastaRef.isEmpty() ) error "Usage: -fastaRef /path/to/reference_fasta_file"
}
#----------------------------------------------------------------------------------------------------
#if( threads.isEmpty() ) threads = 1
#----------------------------------------------------------------------------------------------------
if( check4input.isEmpty() ) sys ~/scripts/bds/rnas-pipe.bds --help
#----------------------------------------------------------------------------------------------------

#------------------------------
# Make directories as required
#------------------------------
#
string bamFiles = "bamFiles"
string preqcBamFiles = "preqcBamFiles"
#string strandedReverse = "strandedReverse"
#string strandedNo = "strandedNo"

if( ( !bamFiles.exists() ) && ( !star.isEmpty() ) ) bamFiles.mkdir()

if( ( !preqcBamFiles.exists() ) && ( !prePro.isEmpty() ) ) preqcBamFiles.mkdir()

#if( (!strandedReverse.exists()) && (!strandedNo.exists())  && (!count.isEmpty()) ) {
#    strandedReverse.mkdir()
#    strandedNo.mkdir()
#}
#----------------------------------------------------------------------------------------------------
# temp section
string featureNo = "featureNo"
string featureReverse = "featureReverse"

if( !featureNo.exists() ) featureNo.mkdir()
if( !featureReverse.exists() ) featureReverse.mkdir()
#----------------------------------------------------------------------------------------------------

#------------------------------
# STAR alignment 
#------------------------------

if ( star == "yes" ) {

#----------------------------------------------------------------------
# Put all reads with unique root name into a hash under root key
#----------------------------------------------------------------------
    # Map with unique root key
    string{} uniqueNamesMap 
    
    for (string fq : fastqDir.dir() ) {
         # make sure we have fastq files only
         if ( fq.endsWith(".fastq.gz") ) {
    
             string getR1Index = fq.lastIndexOf("R1") 
             
             if ( getR1Index != -1 ) {
                 # get the root of the file name with regex
                 string[] getFile = fq.split("_L[0-9]{3}_R[0-9].fastq.gz$")
                 string rootName = getFile[0]
    
                 if ( !uniqueNamesMap.hasKey(rootName) ) {
                     # append to the list if it isn't in the list already
                     uniqueNamesMap{rootName} = ''
                 }
                 uniqueNamesMap{rootName} += ","+fq
             }
         }       
    }
#------------------------------
# Execution of STAR
#------------------------------
    #loop over each key in the map
    for (string fqread : uniqueNamesMap.keys() ) {
        #---------------------------------------------
        # define banch of empty variables for later use
        string[] listR1
        string[] listR2
        string[] laneList

        string read1 
        string read2
        string lanes

        string preFix
        #---------------------------------------------
        
        # get value for each key 
        string mapValue = uniqueNamesMap{fqread} 
        # break the values into list
        # side effect of BDS
        string[] getList = mapValue.split(",")
        # this is length of the list
        # -1, because there is an extra comma in the
        # value list. side effect of BDS
        int getListSize = getList.size()-1

        # loop over each item in the getList
        for ( int i : range(1,getListSize) ) {
            # get fastq reads and get it pair 
            string singleRead = getList[i]
            string pairedEnd = singleRead.swapExt("R1.fastq.gz", "R2.fastq.gz")
            # exctract lanes information from the file name
            string[] tmpLane = singleRead.split("_")
            string tmpLane2 = tmpLane.pop()
            string getLane = tmpLane.pop()

            listR1.add(singleRead)
            listR2.add(pairedEnd)
            laneList.add(getLane)

            # concatenate for STAR usage 
            read1 = listR1.join(",")
            read2 = listR2.join(",")
            lanes = laneList.join(",")
        }
        # get file name pre fix for STAR naming 
        if ( preFix.isEmpty() ) preFix = bamFiles+"/"+fqread+"_"

        #string bamOut = preFix+"Aligned.out.bam"
        #task ( bamOut <- [read1, read2] ) {
        task STAR --runThreadN 27 \
                  --genomeDir $genomeIndex \
                  --outSAMtype BAM Unsorted \
                  --outSAMattrRGline ID:$lanes CN:AGRF DS:RNA-seq PL:ILLUMINA PM:MiSeq SM:$fqread \
                  --outSAMunmapped Within \
                  --readFilesCommand zcat \
                  --readFilesIn $read1 $read2 \
                  --outFileNamePrefix $preFix
        wait
    }
}
#----------------------------------------------------------------------
# piacrd secssion for bam file preprocessing for RNA-SeQC report
#----------------------------------------------------------------------

if ( prePro == "yes" ) {
   # loop over bamFiles directory.
   # only interested in bam files
    for ( string bamFile : bamFiles.dir("*bam") ) {
        # put newly generated *sorted.bam files into preqcBamFiles directory
        string sortedName = preqcBamFiles+"/"+bamFile.baseName().swapExt("Aligned.out.bam", "sorted.bam")

        task ( sortedName <- bamFile ) {
            sys picard SortSam TMP_DIR=tmp/ \
                              VALIDATION_STRINGENCY=LENIENT \
                              INPUT=$bamFile \
                              OUTPUT=$sortedName \
                              SORT_ORDER=coordinate
        }
        # put newly generated reordered.bam files into the same directory i.e preqcBamFiles
        string reorderedName = sortedName.swapExt(".bam", "_reordered.bam")
    
        task ( reorderedName <- sortedName ) {
           sys picard ReorderSam TMP_DIR=tmp/ \
                                 VALIDATION_STRINGENCY=LENIENT \
                                 INPUT=$sortedName \
                                 OUTPUT=$reorderedName \
                                 REFERENCE=$fastaRef
        }
    
        string mdupsName = reorderedName.swapExt(".bam", "_marked_dups.bam")
        string metricsName = reorderedName.swapExt(".bam", "_marked_dups.metrics")

        task ( mdupsName <- reorderedName ) {
           sys picard MarkDuplicates TMP_DIR=tmp/ \
                                     VALIDATION_STRINGENCY=LENIENT \
                                     CREATE_INDEX=true \
                                     INPUT=$reorderedName \
                                     OUTPUT=$mdupsName \
                                     METRICS_FILE=$metricsName
        }
    }
}

#------------------------------
# htseq-count 
#------------------------------

#if ( count == "yes" ) {
#        
#    for (string bamFile : bamFiles.dir("*bam") ) {
#    
#        string reverseStranded = strandedReverse+"/"+bamFile.baseName().swapExt("_Aligned.out.bam", ".txt")
#         
#        task ( reverseStranded <- bamFile ) {
#            sys htseq-count --quiet \
#                            --stranded=reverse \
#                            --format=bam \
#                            $bamFile $gtfFile > $reverseStranded
#        }
#
#        string noStranded = strandedNo+"/"+bamFile.baseName().swapExt("_Aligned.out.bam", ".txt")
#
#        task ( noStranded <- bamFile ) {
#            sys htseq-count --quiet \
#                            --stranded=no \
#                            --format=bam \
#                            $bamFile $gtfFile > $noStranded
#        }
#    }
#}

#------------------------------
# featureCount
#------------------------------

if ( count == "yes" ) {

    for (string bamFile : bamFiles.dir("*bam") ) {
    
        string reverseFeature = featureReverse+"/"+bamFile.baseName().swapExt("_Aligned.out.bam", ".txt")
        task (reverseFeature <- bamFile) {
            sys featureCounts -a $gtfFile \
                              -o $reverseFeature \
                              $bamFile \
                              -s 2
        }
    
        string noFeature = featureNo+"/"+bamFile.baseName().swapExt("_Aligned.out.bam", ".txt")
        task (noFeature <- bamFile) {
            sys featureCounts -a $gtfFile \
                              -o $noFeature \
                              $bamFile \
                              -s 0
        }
    }
}
#------------------------------
# End
#------------------------------
