#!/home/kirill/.bds/bds

#----------------------------------------------------------------------------------------------------
#  Map Reads to the reference genome
#----------------------------------------------------------------------------------------------------

#------------------------------
#  Serine #MonashFlavour
#------------------------------

#----------------------------------------------------------------------------------------------------
#  About STARmergeNalign.bds
#               -  takes a whole directory that contatins fastq files and maps to the reference genome
#               -  identifies samples that span different lanes and merges then together during STAR run,
#                  outputting sigle bam file per sample.
#               -  auto matches paired end
#               -  creates strandedNo and strandedReverse directories under the current directory and 
#                  performce read count using htseq-count outputting results in corresponding directories.
#----------------------------------------------------------------------------------------------------

#------------------------------
#  Input Parametrs
#------------------------------

helpUnsorted := true

#sys sleep 40
help General options
string fqRegex     help optional, provide regex for your common file ending
string extn        help optional, specify your files extension e.g fq or fastq.gz
help To aling your reads using STAR
bool star          help flag if you like to align with STAR
string fqDir       help path to the directory with fastq file                   
string genomeIndex help path to the directory with genome index for the coresponding species
help To also count features using featureCounts
bool count         help flag if you like to count reads with featureCount
string gtfFile     help path to the directory with gtf file
help To pre process your bam files for RNA-SeQC report 
bool prePro        help flag if you like to preprocess your bam files
string fastaRef    help path to the reference fasta file
help To get fastqc report
bool fastqc        help flag if you like to run fastQC report on the files
help To adaptor and quality trim your fastq files 
bool clip          help flag if you like to trim your fastq files before processing further

#------------------------------
# Default parameters
#------------------------------
#if(fqRegex.isEmpty()) fqRegex = "_L[0-9]{3}_R[0-9]_[0-9]{3}.fastq.gz$"
#if(fqRegex.isEmpty()) fqRegex = "_L[0-9]{3}_R[0-9].fastq.gz$"
if(fqRegex.isEmpty()) fqRegex = "_R[0-9]_[0-9]{3}.fastq.gz$"
if(extn.isEmpty()) extn = "*fastq.gz"

#------------------------------
# Make directories as required
#------------------------------

string bamFiles = "bamFiles"
string preqcBamFiles = "preqcBamFiles"
string featureNo = "featureNo"
string featureReverse = "featureReverse"
string fastqcReport = "fastqcReport"
string clippedFastq = "clippedFastq"

if((!bamFiles.exists()) && (star)) bamFiles.mkdir()
if((!preqcBamFiles.exists()) && (prePro)) preqcBamFiles.mkdir()
if((!clippedFastq.exists()) && (clip)) clippedFastq.mkdir()
if((!featureNo.exists()) && (count)) featureNo.mkdir()
if((!featureReverse.exists()) && (count)) featureReverse.mkdir()
if((!fastqcReport.exists()) && (fastqc)) fastqcReport.mkdir()

#------------------------------
# Sanity check
#------------------------------
if(fastqc) {
    if(fqDir.isEmpty()) error "Usage: -fqDir /path/to/fastq_reads/"
}
if(clip) {
    if(fqDir.isEmpty()) error "Usage: -fqDir /path/to/fastq_reads/"
}
if(star) {
    if(fqDir.isEmpty())  error "Usage: -fqDir /path/to/fastq_reads/"
    if(genomeIndex.isEmpty())  error "Usage: -genomeIndex /path/to/genome_index/"
}
if(count) {
    if(gtfFile.isEmpty())  error "Usage: -gtfFile /path/to/gtf_file/"
}
if(prePro) {
    if(fastaRef.isEmpty()) error "Usage: -fastaRef /path/to/reference_fasta_file"
}
if( args.isEmpty() ) {
    printHelp()
    exit(1)
}
##------------------------------
## fastQC report
##------------------------------
#    if(fastqc) {
#        sys module load fastqc
#        string fastqcFiles = getList.join(" ")
#        task fastqc -o $fastqcReport -f fastq $fastqcFiles
#    }

#------------------------------
# BAM generation step
#------------------------------

string[] bamsList

string{} uniqueNames = getUniqueNames(fqDir)
#loop over each key in the map
for(string fqread : uniqueNames.keys()) {
    # get value for each key and break values into list
    string mapValue = uniqueNames{fqread} 
    string[] getList = mapValue.split(",")
    string[] orderedList = getOrderedList(getList)

    if(clip) {
        string reads = getNesoniReads(orderedList)
        string[] clippedFqReads = NesoniClip(fqread, reads, orderedList)

        if(star) {

            string bamFile = mapSTAR(fqread, genomeIndex, clippedFqReads, clippedFqReads) 
            bamsList.add(bamFile)
        }
    }

    if(star && !clip) {
        string[] reads = getSTARreads(orderedList)
        string bamFile = mapSTAR(fqread, genomeIndex, reads, orderedList) 
        bamsList.add(bamFile)
    }
}
#------------------------------
# BAM processing
#------------------------------
string[] allReadsFiles

for(string bamFile : bamsList) {
    if(prePro) {
        string testCheck = getPrePro(bamFile, fastaRef)
    }

    if(count) {
        string readsFile = getReadsCount(bamFile, gtfFile)
        allReadsFiles.add(readsFile)
    }
}
#----------------------------------------------------------------------------------------------------
# End
#----------------------------------------------------------------------------------------------------

#------------------------------
# Functions
#------------------------------
string{} getUniqueNames(string fqDir) {
    # Map with unique root key
    string{} uniqueNames 
    for(string fq : fqDir.dir(extn)) {
        # make sure we have fastq files only
        string getR1Index = fq.lastIndexOf("R1") 
        if(getR1Index != -1) {
            # get the root of the file name with regex
            string[] getFile = fq.split(fqRegex)
            string rootName = getFile[0]
            # append to the list if it isn't in the list already
            if(!uniqueNames.hasKey(rootName)) uniqueNames{rootName}=""
            uniqueNames{rootName}+=fq+","
        }
    }
    return uniqueNames
}

string[] getOrderedList(string[] readsList) {

    string[] orderedReadsList
    bool checkPair
    int getListSize = readsList.size()-1
    
    for(int i : range(0,getListSize)) {
        # get fastq reads and get it pair 
        string singleRead = readsList[i]
        string[] getLastBit = singleRead.split("R1")
        string lastBit = getLastBit.pop()
        string rOne = "R1"+lastBit
        string rTwo = "R2"+lastBit
        string pairedEnd = singleRead.swapExt(rOne, rTwo)
        
        orderedReadsList.add(singleRead)
        checkPair = pairedEnd.isFile()
        if(checkPair) orderedReadsList.add(pairedEnd)
    }
    orderedReadsList.add(checkPair)
    return orderedReadsList
}

string[] getSTARreads(string[] orderedList) {
      
    string boolItem = orderedList.pop()
    bool checkPair = boolItem.parseBool()

    if(checkPair) {
        int listSize = orderedList.size()-1
        string[] listR2

        for (int i=listSize; i > 0; i -= 2) {
            string read = orderedList.remove(orderedList[i])
            listR2.add(read)
        }
        
        listR2 = listR2.reverse()
        string read1 = orderedList.join(",")
        string read2 = listR2.join(",")
        return [read1, read2]
    }
    else {
        string read1 = orderedList.join(",")
        return [read1]
    }
}

string mapSTAR(string rootName, string genomeIndex, string[] listOfReads, string[] rawReads) {

    string rootBase = rootName.baseName()
    string preFix = bamFiles+"/"+rootBase+"_"
    string bamOut = preFix+"Aligned.out.bam"
    string reads = listOfReads.join(" ")
    
    task(bamOut <- rawReads) {
        sys STAR --runThreadN 28 \
                 --genomeDir $genomeIndex \
                 --outSAMtype BAM Unsorted \
                 --outSAMunmapped Within \
                 --outSAMattrRGline ID:001 CN:Unknown DS:RNA-seq PL:ILLUMINA PM:MiSeq SM:$rootBase \
                 --readFilesCommand zcat \
                 --readFilesIn $reads \
                 --outFileNamePrefix $preFix
    }
    wait
    # you can remove wait statement and reduce number of threads
    # however this will run all your fastq files in parallel
    # doing this I find a bit impractical on our server because of
    # limited RAM - only 128 Gb
    return bamOut
}


string getNesoniReads(string[] orderedList) {

    string boolItem = orderedList.pop()
    bool checkPair = boolItem.parseBool()
    int listSize = orderedList.size()

    if(checkPair) {
        int numberOfPairs = listSize/2
        int finalListSize = listSize+numberOfPairs

        for (int i=0; i<finalListSize; i+=3) {
            orderedList.add(i, "pairs:")
        }
    }
    else {
        int finalListSize = listSize*2

        for (int i=0; i<finalListSize; i+=2) {
            orderedList.add(i, "reads:")
        }
    }

    string nesoniReads = orderedList.join(" ")
    return nesoniReads
}

string[] NesoniClip(string rootName, string nesoniReads, string[] rawReads) {

    string preFix = clippedFastq+"/"+rootName.baseName()
    string outfq = preFix+"_single.fq.gz"
    string logFile = preFix+"_log.txt"
    
    string[] reads = nesoniReads.split(" ")
    bool checkPair = reads.has("pairs:")

    if(checkPair) {
        string outfq1 = preFix+"_R1.fq.gz"
        string outfq2 = preFix+"_R2.fq.gz"
        task([outfq, outfq1, outfq2, logFile] <- rawReads){
            #sys source $HOME/pypyenv/bin/activate
            sys nesoni clip: --quality 28 \
                             --out-separate yes \
                             $preFix \
                             $nesoniReads
        }
        return [outfq1, outfq2]
    }
    else {
        task([outfq, logFile] <- rawReads){
            #sys source $HOME/pypyenv/bin/activate
            sys nesoni clip: --quality 28 \
                             --out-separate yes \
                             $preFix \
                             $nesoniReads
        }
        return [outfq]
    }
}

string getPrePro(string bamFile, string fastaRef){

    string sortedName = preqcBamFiles+"/"+bamFile.baseName().swapExt("Aligned.out.bam", "sorted.bam")
    task(sortedName <- bamFile) {
        sys picard SortSam TMP_DIR=tmp/ \
                           VALIDATION_STRINGENCY=LENIENT \
                           INPUT=$bamFile \
                           OUTPUT=$sortedName \
                           SORT_ORDER=coordinate
    }
    string reorderedName = sortedName.swapExt(".bam", "_reordered.bam")
    task(reorderedName <- sortedName) {
        sys picard ReorderSam TMP_DIR=tmp/ \
                              VALIDATION_STRINGENCY=LENIENT \
                              INPUT=$sortedName \
                              OUTPUT=$reorderedName \
                              REFERENCE=$fastaRef
    }
    string mdupsName = reorderedName.swapExt(".bam", "_marked_dups.bam")
    string metricsName = reorderedName.swapExt(".bam", "_marked_dups.metrics")
    task(mdupsName <- reorderedName) {
        sys picard MarkDuplicates TMP_DIR=tmp/ \
                                  VALIDATION_STRINGENCY=LENIENT \
                                  CREATE_INDEX=true \
                                  INPUT=$reorderedName \
                                  OUTPUT=$mdupsName \
                                  METRICS_FILE=$metricsName
    }
    return "all done"
}

string getReadsCount(string bamFile, string gtfFile) {

    string reverseFeature = featureReverse+"/"+bamFile.baseName().swapExt("_Aligned.out.bam", ".txt")
    string reverseSummary = featureReverse+"/"+reverseFeature+".summary"
    task ([reverseFeature, reverseSummary] <- bamFile) {
        sys featureCounts -a $gtfFile \
                          -o $reverseFeature \
                          $bamFile \
                          -s 2
    }
    string noFeature = featureNo+"/"+bamFile.baseName().swapExt("_Aligned.out.bam", ".txt")
    string noSummary = featureReverse+"/"+noFeature+".summary"
    task ([noFeature, noSummary] <- bamFile) {
        sys featureCounts -a $gtfFile \
                          -o $noFeature \
                          $bamFile \
                          -s 0
    }

    return reverseFeature
}
