# 
#  BETA version !
#--------------------------------------------------------------------------------
#                                                                                
#  Map Reads to the reference genome                                             
#                                                                                
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
#  Input Parametrs
#--------------------------------------------------------------------------------

string fastqDir       # path to the directory with fastq file      
#string genomeIndex   # path to the directory with genome index for the coresponding species
#string pairEnd        # Yes or No answer to indicate whether reads are paired end or not

#string fastqSplit = "$HOME/star"
string checkPair = "$HOME/scripts/pairedEnd.py"
#string pairUP = "$HOME/scripts/pairedSTAR.py"
#--------------------------------------------------------------------------------
#
# Main
#
#--------------------------------------------------------------------------------

#-------------
# Sanity check
#-------------

if( fastqDir.isEmpty() )  error "Usage: -fastqDir /path/to/fastq_reads/"
#if( genomeIndex.isEmpty() )  error "Usage: -GenomeIndex /path/to/GenomeIndex/"

#
#-------------
# Map reads
#-------------

string[] testList
string checkNameRoot

#------------------------------
# Unique list of file names
#------------------------------

for (string fq : fastqDir.dir() ) {
 
     if ( fq.endsWith(".fastq.gz") ) {

         string[] tempRoot = fq.split("_L[0-9]{3}_R[0-9].fastq.gz$")
         string rootName = tempRoot[0]

         if ( rootName != checkNameRoot ) {

             testList.add(rootName)
             checkNameRoot = rootName

         }

         else {

             checkNameRoot = rootName 

         }
     }
       
}

#------------------------------
# messing with bds
#------------------------------

string[] listR1
string[] listR2

for (string uniqueName : testList ) {

    for (string fqread : fastqDir.dirPath() ) {
    
        if (fqread.endsWith("fastq.gz") ) {
        
            string getFileIndex = fqread.lastIndexOf(uniqueName) 
            
            if ( getFileIndex != -1 ) {
    
                string getR1Index = fqread.lastIndexOf("R1") 
                  
                if ( getR1Index != -1 ) {
                
                    #print("$fqread\n")
                    listR1.add(fqread)
    
                }

                else {

                    listR2.add(fqread)
                }
            }
        }
    }
    string read1 = listR1.join(",")
    string read2 = listR2.join(",")
    #print("$read1\n $read2\n")

    task STAR --runThreadN 27 \
              --genomeDir ~/star/ \
              --outSAMtype BAM SortedByCoordinate \
              --outSAMattributes All \
              --readFilesCommand zcat \
              --readFilesIn $read1 $read2 \
              --outFileNamePrefix $uniqueName

    listR1 = []
    listR2 = []
   
    wait
}

#string[] listR1
#string checkUniqueName
#
#for (string uniqueName : testList ) {
#
#   if ( !checkUniqueName.isEmpty() ) {
#
#       if ( uniqueName == checkUniqueName ) {
#
#           for (string fqread : fastqDir.dirPath() ) {
#
#               if (fqread.endsWith("fastq.gz") ) {
#               
#                   string getFileIndex = fqread.lastIndexOf(uniqueName) 
#                   
#                   if ( getFileIndex != -1 ) {
#
#                       string getR1Index = fqread.lastIndexOf("R1") 
#                         
#                       if ( getR1Index != -1 ) {
#                       
#                           #print("$fqread\n")
#                           listR1.add(fqread)
#
#                       }
#                   }
#               }
#           }     
#       }
#
#       else {
#
#           string read1 = listR1.join(",")
#           #listR1 = []
#           print("$read1\n")
#           checkUniqueName = uniqueName
#       }
#   }
#
#   else {
#   
#       checkUniqueName = uniqueName
#   }
#
#}
