#! /usr/bin/env bds

#----------------------------------------------------------------------------------------------------
#
#  Map Reads to the reference genome
#                                                                                
#----------------------------------------------------------------------------------------------------

#------------------------------
#  Serine #MonashFlavour
#------------------------------
#
#----------------------------------------------------------------------------------------------------
#
#  About STARmergeNalign.bds
#
#   -  run -h, -help, --help to get more help of the command line arguments
#   -  takes a whole directory that contatins fastq files and maps to the reference genome
#   -  identifies samples that span different lanes and merges then together during STAR run,
#      outputting sigle bam file per sample.
#   -  auto matches paired end
#   -  creates strandedNo and strandedReverse directories under the current directory and 
#      performce read count using htseq-count outputting results in corresponding directories.

#----------------------------------------------------------------------------------------------------
#
#  Usage:
#
#  1. STAR outputs all file into the current directory i.e the directory STAR was executed from.
#  2. The best practise is to make new directory for your STARmergeNaling.bds run and execute
#     STARmergeNalign.bds script within that directory.
#  
#----------------------------------------------------------------------------------------------------
#  Input Parametrs
#----------------------------------------------------------------------------------------------------

string fastqDir       help path to the directory with fastq file       
string genomeIndex    help path to the directory with genome index for the coresponding species
string gtfFile        help path to the directory with gtf file
string readCount      help Select if read counts is required using htseq-count 
string readSort       help Select if reads need to be sorted using samtools 
string rnaseQC        help Select if would like to run RNA-SeQC tool
string count          help Indicate yes or no
string fastaRef       help path to the reference fasta file only supply if you are going to run rnaseQC
#----------------------------------------------------------------------------------------------------
#
# Main
#
#----------------------------------------------------------------------------------------------------

#------------------------------
# Sanity check
#------------------------------

if( fastqDir.isEmpty() )  error "Usage: -fastqDir /path/to/fastq_reads/"
if( genomeIndex.isEmpty() )  error "Usage: -genomeIndex /path/to/genome_index/"
if( gtfFile.isEmpty() )  error "Usage: -gtfFile /path/to/gtf_file/"

#----------------------------------------------------------------------------------------------------

if( readCount.isEmpty() ) readCount = "no"

if( !readCount.isEmpty() ) {
    if( ( readCount != "yes" ) && ( readCount != "no" ) ) error "Usage: -readCount yes or no"
}

#----------------------------------------------------------------------------------------------------

if( count.isEmpty() ) count = "no"

if( !count.isEmpty() ) {
    if( ( count != "yes" ) && ( count != "no" ) ) error "Usage: -count yes or no"
}

#----------------------------------------------------------------------------------------------------

if( readSort.isEmpty() ) readSort = "no"

if( !readSort.isEmpty() ) {
    if( ( readSort != "yes" ) && ( readSort != "no" ) ) error "Usage: -readSort yes or no"
}

#----------------------------------------------------------------------------------------------------

if( rnaseQC.isEmpty() ) rnaseQC = "no"

if( !rnaseQC.isEmpty() ) {
    if( ( rnaseQC != "yes" ) && ( rnaseQC != "no" ) ) error "Usage: -rnaSeQC yes or no"
}

#----------------------------------------------------------------------------------------------------

#------------------------------
# Map reads
#------------------------------

string[] uniqueNamesList # a list with files names, that is sorted uniquely
string checkNameRoot

#------------------------------
# Get list of unique names
#------------------------------

for (string fq : fastqDir.dir() ) {
     # make sure we have fastq files only
     if ( fq.endsWith(".fastq.gz") ) {

         # get the root of the file name with regex

         string[] tempRoot = fq.split("_L[0-9]{3}_R[0-9].fastq.gz$")
         string rootName = tempRoot[0]

         if ( rootName != checkNameRoot ) {

             # append to the list if it isn't in the list already
             uniqueNamesList.add(rootName)
             checkNameRoot = rootName

         }

         else {
             
             # if in the list than just skip
             checkNameRoot = rootName 

         }
     }
}

#------------------------------
# Execution of STAR
#------------------------------

#----------------------------------------------------------------------
# Warning ! unsed code here. migh tneed to be removed
#----------------------------------------------------------------------
#string fastqWorkingDir = "$PWD"
#
#string[] tmp1 = fastqWorkingDir.split("/")
#string tmp2 = tmp1.pop() 
#string[] tmp3 = tmp2.split("AGRF_CAGRF")
#
## SM field in the bam file is populated with samplesName value
## SM i.e Sample. "Use pool name where a pool is being sequenced."
#
#string samplesName = tmp3.pop()                    
#----------------------------------------------------------------------

#------------------------------
# Sanity check if pwd hasn't
# got any bam files in it
#------------------------------

string fastqWorkingDir = "$PWD"

string[] checkBamList

for ( string checkBam : fastqWorkingDir.dirPath() ) {
    if ( checkBam.endsWith(".bam") ) {
        checkBamList.add(checkBam)
    }
}

if ( checkBamList.isEmpty() ) {

    string[] listR1
    string[] listR2
    string[] laneList
    
    for (string uniqueName : uniqueNamesList ) {
    
        for (string fqread : fastqDir.dirPath() ) {
        
            if (fqread.endsWith("fastq.gz") ) {
            
                string getFileIndex = fqread.lastIndexOf(uniqueName) 
                
                if ( getFileIndex != -1 ) {
        
                    string getR1Index = fqread.lastIndexOf("R1") 
    
                    if ( getR1Index != -1 ) {
                    
                        #print("$fqread\n")
                        string[] laneN1 = fqread.split(uniqueName+"_")
                        string laneN2 = laneN1.pop()
                        string[] laneN3 = laneN2.split("_R1")
                        string laneN4 = laneN3[0]
    
                        listR1.add(fqread)
                        laneList.add(laneN4)
        
                    }
    
                    else {
    
                        listR2.add(fqread)
                    }
                }
            }
        }
        string read1 = listR1.join(",")
        string read2 = listR2.join(",")
        string laneNumber = laneList.join(",")
        string preFix = uniqueName+"_"
    
        task STAR --runThreadN 32 \
                   --genomeDir $genomeIndex \
                   --outSAMtype BAM Unsorted \
                   --outSAMattrRGline ID:$laneNumber CN:AGRF DS:RNA-seq PL:ILLUMINA PM:MiSeq SM:$uniqueName \
                   --outSAMunmapped Within \
                   --readFilesCommand zcat \
                   --readFilesIn $read1 $read2 \
                   --outFileNamePrefix $preFix
        
        listR1 = []
        listR2 = []
        laneList = []
       
        wait
    }
}

else {

    print("There were bam files found in the current directory BDS will skip STAR alignment and move on to the next section\n")
}

string workingDir = "$PWD"                 # gets the current directory to which STAR have putted bam files

#------------------------------
# htseq-count 
#------------------------------

if ( readCount == "yes" ) {
    
    string strandedReverse = "strandedReverse"
    
    if( !strandedReverse.exists() ) {
        strandedReverse.mkdir()
    }
    
    for (string bamFile : workingDir.dirPath() ) {
    
        if( bamFile.endsWith(".bam") ) {
    
            string[] temp = bamFile.split("/")
            string name = temp.pop()
            string[] temp2 = name.split('_Aligned')
            string rootName = temp2[0]
    
            string newFile = strandedReverse+"/"+rootName+".txt" 
            task htseq-count -q -s reverse -f bam $bamFile $gtfFile > $newFile
    
        }
    }
    
    wait

    string strandedReverse = "strandedNo"

    if( !strandedNo.exists() ) {
        strandedNo.mkdir()
    }
    
    for (string bamFile : workingDir.dirPath() ) {
    
        if( bamFile.endsWith(".bam") ) {
    
            string[] temp = bamFile.split("/")
            string name = temp.pop()
            string[] temp2 = name.split('_Aligned')
            string rootName = temp2[0]
    
            string newFile = strandedNo+"/"+rootName+".txt" 
            task htseq-count -q -s no -f bam $bamFile $gtfFile > $newFile
    
        }
    }
}

#------------------------------
# featureCount
#------------------------------

#for ( string checkIfDirs : workingDir.dir() ) {
#   if ( (checkIfDirs == "strandedReverse") || (checkIfDirs == "strandedNo") ) {
#       print("strandedReverse and/or strandedNo directories were identified in the current directory. This is a
#signature of the counting step being processed. BDS will skip counting step and move on to the next step\n")
#       exit     
#   }
#}
#
#exit


if ( count == "yes" ) {
    
    string strandedNo = "strandedNo"
    string strandedReverse = "strandedReverse"
    
    if( !strandedNo.exists() ) {
        strandedNo.mkdir()
    }

    for (string bamFile : workingDir.dirPath() ) {
    
        if( bamFile.endsWith(".bam") ) {
    
            string[] temp = bamFile.split("/")
            string name = temp.pop()
            string[] temp2 = name.split('_Aligned')
            string rootName = temp2[0]
    
            string noStrand = strandedNo+"/"+rootName+".txt" 

            task featureCounts -a $gtfFile -o $noStrand $bamFile -s 0
    
        }
    }

    wait

    if( !strandedReverse.exists() ) {
        strandedReverse.mkdir()
    }
    
    for (string bamFile : workingDir.dirPath() ) {
    
        if( bamFile.endsWith(".bam") ) {
    
            string[] temp = bamFile.split("/")
            string name = temp.pop()
            string[] temp2 = name.split('_Aligned')
            string rootName = temp2[0]
    
            string reverseStrand = strandedReverse+"/"+rootName+".txt" 
            string noStrand = strandedNo+"/"+rootName+".txt" 

            task featureCounts -a $gtfFile -o $reverseStrand $bamFile -s 2
    
        }
    }
}


#------------------------------
# piacrd secssion
# bam file preprocessing 
# for RNA-SeQC run
#------------------------------

if (readSort == "yes" ) {

    string preqcBamFiles = "preqcBamFiles"
    
    if( !preqcBamFiles.exists() ) {
    
        preqcBamFiles.mkdir()
    }

    string canonicalPath = fastaRef.path()
    string[] tmpPath1 = canonicalPath.split("/")
    string toChuck = tmpPath1.pop()
    string tmpPath2 = tmpPath1.join("/")

    string tempRef = fastaRef.baseName(".fa")

    string nameRef = tmpPath2+"/"+tempRef+".dict"

    sys picard CreateSequenceDictionary REFERENCE=$fastaRef OUTPUT=$nameRef

    # loop over the directory and submit all bam files for sorting

    for (string bamFile : workingDir.dirPath() ) {
    
        if( bamFile.endsWith(".bam") ) {
    
            string[] temp = bamFile.split("/")
            string name = temp.pop()
            string[] temp2 = name.split('_Aligned')
            string rootName = temp2[0]
            string sortedName = preqcBamFiles+"/"+rootName+"_sorted.bam"
    
            task picard SortSam TMP_DIR=tmp/ \
                                INPUT=$bamFile \
                                OUTPUT=sortedName \
                                SORT_ORDER=coordinate
        }
    }
    
    wait

    string preqcDir = "$PWD"+preqcBamFiles

    # waint until all bam files in the directory were sorted
    # then reorder all sorted bam files

    for (string bamFile : preqcDir.dirPath() ) {

        if( bamFile.endsWith("sorted.bam") ) {

            string[] temp = bamFile.split("/")
            string name = temp.pop()
            string[] temp2 = name.split('_sorted')
            print("$temp2\n")
            string rootName = temp2[0]
            string sortedName = preqcBamFiles+"/"+rootName+"_sorted_reordered.bam"

            task picard ReorderSam TMP_DIR=tmp/ \
                                   INPUT=$bamFile \
                                   OUTPUT=$sortedName \
                                   REFERENCE=$fastaRef

        }
    }

    wait 

    # wait until all bam fiels in the direcotory were reordered
    # then mark duplicates

    for (string bamFile : preqcDir.dirPath() ) {
    
        if( bamFile.endsWith("reordered.bam") ) {
    
            string[] temp = bamFile.split("/")
            string name = temp.pop()
            string[] temp2 = name.split('_sorted')
            string rootName = temp2[0]
            string sortedName = preqcBamFiles+"/"+rootName+"_sorted_reordered_marked_dups.bam"
            string metricsName = preqcBamFiles+"/"+rootName+"_sorted_reordered_marked_dups.metrics"

            task picard MarkDuplicates TMP_DIR=tmp/ \
                                       CREATE_INDEX=true \
                                       INPUT=$bamFile \
                                       OUTPUT=$sortedName \
                                       METRICS_FILE=$metricsName

        }
    }
}

#------------------------------
# Beta RNA-SeQC
#------------------------------

if ( rnaseQC == "yes" ) {

    print("Hi\n")

}

#------------------------------
# The End
#------------------------------
