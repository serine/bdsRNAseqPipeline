#! /usr/bin/env bds

#----------------------------------------------------------------------------------------------------
#
#  Map Reads to the reference genome
#                                                                                
#----------------------------------------------------------------------------------------------------

#------------------------------
#  Serine #MonashFlavour
#------------------------------
#
#----------------------------------------------------------------------------------------------------
#
#  About STARmergeNalign.bds
#
#   -  run -h, -help, --help to get more help of the command line arguments
#   -  takes a whole directory that contatins fastq files and maps to the reference genome
#   -  identifies samples that span different lanes and merges then together during STAR run,
#      outputting sigle bam file per sample.
#   -  auto matches paired end
#   -  creates strandedNo and strandedReverse directories under the current directory and 
#      performce read count using htseq-count outputting results in corresponding directories.

#----------------------------------------------------------------------------------------------------
#
#  Usage:
#
#  1. STAR outputs all file into the current directory i.e the directory STAR was executed from.
#  2. The best practise is to make new directory for your STARmergeNaling.bds run and execute
#     STARmergeNalign.bds script within that directory.
#  
#----------------------------------------------------------------------------------------------------
#  Input Parametrs
#----------------------------------------------------------------------------------------------------

string fastqDir       help path to the directory with fastq file       
string genomeIndex    help path to the directory with genome index for the coresponding species
string gtfFile        help path to the directory with gtf file
string readCount      help Select if read counts is required using htseq-count 
string readSort       help Select if reads need to be sorted using samtools 
string rnaseQC        help Select if would like to run RNA-SeQC tool
string betaReadCount  help Indicate yes or no
#----------------------------------------------------------------------------------------------------
#
# Main
#
#----------------------------------------------------------------------------------------------------

#------------------------------
# Sanity check
#------------------------------

if( fastqDir.isEmpty() )  error "Usage: -fastqDir /path/to/fastq_reads/"
if( genomeIndex.isEmpty() )  error "Usage: -genomeIndex /path/to/genome_index/"
if( gtfFile.isEmpty() )  error "Usage: -gtfFile /path/to/gtf_file/"

if( readCount.isEmpty() ) readCount = "no"

if( !readCount.isEmpty() ) {

    #print("$readCount\n")
    if( ( readCount != "yes" ) && ( readCount != "no" ) ) error "Usage: -readCount yes or no"

}

if( readSort.isEmpty() ) readSort = "no"

if( !readSort.isEmpty() ) {

    if( ( readSort != "yes" ) && ( readSort != "no" ) ) error "Usage: -readSort yes or no"

}

if( rnaseQC.isEmpty() ) rnaseQC = "no"

if( !rnaseQC.isEmpty() ) {

    if( ( rnaseQC != "yes" ) && ( rnaseQC != "no" ) ) error "Usage: -rnaSeQC yes or no"

}
#------------------------------
# Map reads
#------------------------------

string[] uniqueNamesList # a list with files names, that is sorted uniquely
string checkNameRoot

#------------------------------
# Get list of unique names
#------------------------------

for (string fq : fastqDir.dir() ) {
     # make sure we have fastq files only
     if ( fq.endsWith(".fastq.gz") ) {

         # get the root of the file name with regex
         string[] tempRoot = fq.split("_L[0-9]{3}_R[0-9].fastq.gz$")
         string rootName = tempRoot[0]

         if ( rootName != checkNameRoot ) {

             # append to the list if it isn't in the list already
             uniqueNamesList.add(rootName)
             checkNameRoot = rootName

         }

         else {
             
             # if in the list than just skip
             checkNameRoot = rootName 

         }
     }
}

#------------------------------
# Execution of STAR
#------------------------------

string[] listR1
string[] listR2
string[] laneList

for (string uniqueName : uniqueNamesList ) {

    for (string fqread : fastqDir.dirPath() ) {
    
        if (fqread.endsWith("fastq.gz") ) {
        
            string getFileIndex = fqread.lastIndexOf(uniqueName) 
            
            if ( getFileIndex != -1 ) {
    
                string getR1Index = fqread.lastIndexOf("R1") 

                if ( getR1Index != -1 ) {
                
                    #print("$fqread\n")
                    string[] laneN1 = fqread.split(uniqueName+"_")
                    string laneN2 = laneN1.pop()
                    string[] laneN3 = laneN2.split("_R1")
                    string laneN4 = laneN3[0]

                    listR1.add(fqread)
                    laneList.add(laneN4)
    
                }

                else {

                    listR2.add(fqread)
                }
            }
        }
    }
    string read1 = listR1.join(",")
    string read2 = listR2.join(",")
    string laneNumber = laneList.join(",")
    string preFix = uniqueName+"_"
    #print("$read1\n $read2\n")

    task echo "this is star part"
    #task STAR --runThreadN 3 \
    #          --genomeDir $genomeIndex \
    #          --outSAMtype BAM Unsorted \
    #          --outSAMattrRGline ID:$laneNumber CN:AGRF DS:hey PL:ILLUMINA PM:MySeq SM:t1 \
    #          --outSAMunmapped Within \
    #          --readFilesCommand zcat \
    #          --readFilesIn $read1 $read2 \
    #          --outFileNamePrefix $preFix

    listR1 = []
    listR2 = []
    laneList = []
   
    #wait
}

string workingDir = "$PWD"                 # gets the current directory to which STAR have putted bam files

#------------------------------
# htseq-count 
#------------------------------

if ( readCount == "yes" ) {
    
    #string strandedNo = "strandedNo"
    string strandedReverse = "strandedReverse"
    
    #if( !strandedNo.exists() ) {
    #
    #    strandedNo.mkdir()
    #
    #}
    
    if( !strandedReverse.exists() ) {
    
        strandedReverse.mkdir()
    }
    
    for (string bamFile : workingDir.dirPath() ) {
    
        if( bamFile.endsWith(".bam") ) {
    
            string[] temp = bamFile.split("/")
            string name = temp.pop()
            string[] temp2 = name.split('_Aligned')
            string rootName = temp2[0]
    
            string newFile = strandedReverse+"/"+rootName+".txt" 
            #task htseq-count -q -s reverse -f bam $bamFile $gtfFile > $newFile
            task echo "this is htseq-count part"
    
        }
    }
}

#------------------------------
# featureCount
#------------------------------

if ( betaReadCount == "yes" ) {
    
    string strandedNo = "strandedNo"
    string strandedReverse = "strandedReverse"
    
    if( !strandedNo.exists() ) {
        strandedNo.mkdir()
    }
    
    if( !strandedReverse.exists() ) {
        strandedReverse.mkdir()
    }
    
    for (string bamFile : workingDir.dirPath() ) {
    
        if( bamFile.endsWith(".bam") ) {
    
            string[] temp = bamFile.split("/")
            string name = temp.pop()
            string[] temp2 = name.split('_Aligned')
            string rootName = temp2[0]
    
            string reverseStrand = strandedReverse+"/"+rootName+".txt" 
            string noStrand = strandedNo+"/"+rootName+".txt" 

            task featureCounts -a $gtfFile -o $reverseStrand $bamFile; \
                 featureCounts -a $gtfFile -o $noStrand $bamFile

           # task echo "this is task onea"; \
           #      echo "this is task two"
    
        }
    }
}


#------------------------------
# Beta samtools
#------------------------------

if (readSort == "yes" ) {

    string sortedBamFiles = "sortedBamFiles"
    
    if( !sortedBamFiles.exists() ) {
    
        sortedBamFiles.mkdir()
    }
    
    for (string bamFile : workingDir.dirPath() ) {
    
        if( bamFile.endsWith(".bam") ) {
    
            string[] temp = bamFile.split("/")
            string name = temp.pop()
            string[] temp2 = name.split('_Aligned')
            string rootName = temp2[0]
            string sortedName = sortedBamFiles+"/"+rootName+"_sorted"
    
            task samtools sort -@ 10 $bamFile $sortedName
        }
    
        wait
    }
}

#------------------------------
# Beta RNA-SeQC
#------------------------------

if ( rnaseQC == "yes" ) {

    print("Hi\n")

}

#------------------------------
# The End
#------------------------------
